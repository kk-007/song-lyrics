{"version":3,"sources":["components/search/block/BlockList.js","components/result/Result.js","components/search/Search.js","App.js","serviceWorker.js","index.js","images/logo.svg"],"names":["BlockList","props","data","map","chunk","index","key","className","src","album","cover_small","alt","cover","title","artist","name","onClick","displayLyrics","Result","useState","lyrics","setLyrics","useEffect","fetch","then","json","result","error","catch","console","Search","input","setInput","res","setRes","onChange","e","a","suggest","target","value","logo","type","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"uNAyBeA,MAvBf,SAAmBC,GAClB,IAAIC,EAAOD,EAAMC,KAAKC,KAAI,SAACC,EAAOC,GAAR,OACzB,wBAAIC,IAAKD,GACR,yBAAKE,UAAU,WACd,yBAAKC,IAAKJ,EAAMK,MAAMC,YAAaC,IAAKP,EAAMK,MAAMG,MAAOL,UAAU,eACrE,yBAAKA,UAAU,SACd,2BAAIH,EAAMS,OACV,2BAAIT,EAAMU,OAAOC,OAElB,4BACCR,UAAU,MACVS,QAAS,WACRf,EAAMgB,cAAcb,EAAMU,OAAOC,KAAMX,EAAMS,SAH/C,mBAWH,OAAO,4BAAKX,I,gBCYEgB,MAhCf,SAAgBjB,GAAQ,IAAD,EACQkB,mBAAS,IADjB,mBACdC,EADc,KACNC,EADM,KAmBtB,OAjBAC,qBACC,WAECC,MAAM,6EAAD,OACyEtB,EAAMmB,OACjFN,OAFE,YAEQb,EAAMmB,OAAOP,QAExBW,MAAK,SAACtB,GAAD,OAAUA,EAAKuB,UACpBD,MAAK,SAACE,GACNA,EAAOC,MAAQN,EAAUK,EAAOC,OAASN,EAAUK,EAAON,WAE1DQ,OAAM,SAACD,GACPE,QAAQF,MAAM,SAAUA,QAG3B,CAAE1B,EAAMmB,OAAOP,MAAOZ,EAAMmB,OAAON,SAGnC,yBAAKP,UAAU,UACbN,EAAMmB,OAAOP,OACb,wBAAIN,UAAU,SACZN,EAAMmB,OAAOP,MACd,kCAAQZ,EAAMmB,OAAON,SAGtBb,EAAMmB,OAAOP,OAASO,ICEXU,MA3Bf,SAAgB7B,GAAQ,IAAD,EACMkB,mBAAS,IADf,mBACdY,EADc,KACPC,EADO,OAEEb,mBAAS,IAFX,mBAEdc,EAFc,KAETC,EAFS,KAGlBC,EAAQ,uCAAG,WAAOC,GAAP,eAAAC,EAAA,6DACdpC,EAAMgB,cAAc,KAAM,MACtBqB,EAAUF,EAAEG,OAAOC,MAFT,SAGRR,EAASM,GAHD,OAIdf,MAAM,kFAAD,OAAmFe,IACtFd,MAAK,SAACtB,GAAD,OAAUA,EAAKuB,UACpBD,MAAK,SAACE,GACNQ,EAAOR,EAAOxB,SAGd0B,OAAM,SAACD,GACPE,QAAQF,MAAM,SAAUA,MAXZ,2CAAH,sDAcZ,OACC,yBAAKpB,UAAU,aACd,yBAAKC,IAAKiC,IAAM9B,IAAI,OAAOJ,UAAU,SACrC,2BAAOmC,KAAK,OAAOF,MAAOT,EAAOI,SAAUA,EAAUQ,YAAY,uBAChE1C,EAAMmB,OAAOP,MAAQ,GAAK,kBAAC,EAAD,CAAWX,KAAM+B,EAAKhB,cAAehB,EAAMgB,gBACtE,kBAAC,EAAD,CAAQG,OAAQnB,EAAMmB,WCVVwB,MAbf,WAAgB,IAAD,EACgBzB,mBAAS,IADzB,mBACNC,EADM,KACEC,EADF,KAMd,OACC,6BACC,kBAAC,EAAD,CAAQJ,cANU,SAACH,EAAQD,GAE5BQ,EAAU,CAAEP,SAAQD,WAImBO,OAAQA,MCC7ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEd/B,OAAM,SAAAD,GACLE,QAAQF,MAAMA,EAAMiC,a,kBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.68a2fbe5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction BlockList(props) {\r\n\tlet data = props.data.map((chunk, index) => (\r\n\t\t<li key={index}>\r\n\t\t\t<div className=\"wrapper\">\r\n\t\t\t\t<img src={chunk.album.cover_small} alt={chunk.album.cover} className=\"artist-pic\" />\r\n\t\t\t\t<div className=\"right\">\r\n\t\t\t\t\t<p>{chunk.title}</p>\r\n\t\t\t\t\t<p>{chunk.artist.name}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName=\"btn\"\r\n\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\tprops.displayLyrics(chunk.artist.name, chunk.title);\r\n\t\t\t\t\t}}\r\n\t\t\t\t>\r\n\t\t\t\t\tGet Lyrics\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t</li>\r\n\t));\r\n\treturn <ul>{data}</ul>;\r\n}\r\n\r\nexport default BlockList;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nfunction Result(props) {\r\n\tconst [ lyrics, setLyrics ] = useState('');\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\t// console.log(`https://no-cors-fetch.herokuapp.com/getJson?url=https://api.lyrics.ovh/v1/${props.lyrics.artist}/${props.lyrics.title}`);\r\n\t\t\tfetch(\r\n\t\t\t\t`https://no-cors-fetch.herokuapp.com/getJson?url=https://api.lyrics.ovh/v1/${props.lyrics\r\n\t\t\t\t\t.artist}/${props.lyrics.title}`\r\n\t\t\t)\r\n\t\t\t\t.then((data) => data.json())\r\n\t\t\t\t.then((result) => {\r\n\t\t\t\t\tresult.error ? setLyrics(result.error) : setLyrics(result.lyrics);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((error) => {\r\n\t\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t\t});\r\n\t\t},\r\n\t\t[ props.lyrics.title, props.lyrics.artist ]\r\n\t);\r\n\treturn (\r\n\t\t<div className=\"lyrics\">\r\n\t\t\t{props.lyrics.title && (\r\n\t\t\t\t<h3 className=\"title\">\r\n\t\t\t\t\t{props.lyrics.title}\r\n\t\t\t\t\t<span>-{props.lyrics.artist}</span>\r\n\t\t\t\t</h3>\r\n\t\t\t)}\r\n\t\t\t{props.lyrics.title && lyrics}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState } from 'react';\r\nimport BlockList from './block/BlockList';\r\nimport logo from '../../images/logo.svg';\r\nimport Result from '../result/Result';\r\nfunction Search(props) {\r\n\tconst [ input, setInput ] = useState('');\r\n\tconst [ res, setRes ] = useState([]);\r\n\tlet onChange = async (e) => {\r\n\t\tprops.displayLyrics(null, null);\r\n\t\tlet suggest = e.target.value;\r\n\t\tawait setInput(suggest);\r\n\t\tfetch(`https://no-cors-fetch.herokuapp.com/getJson?url=https://api.lyrics.ovh/suggest/${suggest}`)\r\n\t\t\t.then((data) => data.json())\r\n\t\t\t.then((result) => {\r\n\t\t\t\tsetRes(result.data);\r\n\t\t\t\t// console.log(result);\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\tconsole.error('Error:', error);\r\n\t\t\t});\r\n\t};\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<img src={logo} alt=\"logo\" className=\"logo\" />\r\n\t\t\t<input type=\"text\" value={input} onChange={onChange} placeholder=\"Search Song Here..\" />\r\n\t\t\t{props.lyrics.title ? '' : <BlockList data={res} displayLyrics={props.displayLyrics} />}\r\n\t\t\t<Result lyrics={props.lyrics} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState } from 'react';\nimport Search from './components/search/Search';\n\nfunction App() {\n\tconst [ lyrics, setLyrics ] = useState({});\n\tlet displayLyrics = (artist, title) => {\n\t\t// console.log(artist,title);\n\t\tsetLyrics({ artist, title });\n\t};\n\treturn (\n\t\t<div>\n\t\t\t<Search displayLyrics={displayLyrics} lyrics={lyrics} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.70ff2694.svg\";"],"sourceRoot":""}